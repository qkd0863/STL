메모리 할당량이 커지면 메모리가 깨짐
transform(istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{out}, ::toupper);

4월 23 화요일 기말



	
Container (자료구조)
1. Sequence
-array<T,N>		크기 고정
-vector<T>		//한 방향 확장
-deque<T>		//덱 , 양 방향 확장
-forward_list<T>		단일 연결리스트,	 공간과 시간의 오버헤드가 없다, 이보다 더 최적화할순 없다-(비효율적인 멤버는 존재하지 않는다, 사용하기 어렵다)
-list<T>
2. Associative
3. unordered Associative
stack queue flatset map


Algorithm
1. Non-Modifying
2. Modifying
3. Sort
numeric

vector에 얼마나 담을수 있나?

vector resize에서 복사생성이 일어나는 이유 - 원본이 훼손되면 안돼기 때문에 이동이 아니라 복사가 일어난다
예외상황이 안일어난다고 알려주면 이동이 일어난다 - noexcept


array vector 메모리가 붙어있다
array vector deque - [] 사용가능 random_access
array vector deque list - Sequence 원소의 값을 자유롭게 변경가능


list는 push back, front, insert, erase 모두 상수시간에 가능


fuction class
string view class
span		메모리를 통일된 방식으로 다룰수 있다


iterator(반복자) 포인터를 일반화 한것


l - value	(loaction value)
value category 에 대해 알아보자

함수 오버로딩은 const의 유무로 가능하다
void f()
void f()const

변수를 _변수이름 이런식으로 지으면 안된다 _count 
size가 0이면 begin과 end가 같다
my_copy(s.begin(), s.end(), back_inserter(v));	반복자 어댑터로 size를 바꿔야 한다
vector 정렬되어 있다면 binary_search로 찾아야 한다 find는 느리다


iota(시작주소, 끝주소, 초기값)	1씩증가시키며 채운다
count_if(시작주소, 끝주소,조건)	조건을 만족하는 갯수
accumulate(시작주소,끝주소,초기값(자료형))   3번째 인자의 자료형을 따라간다 
max_element()
lexicographical_compare()
unique() 중복원소 제거











문제 풀이


//문제 int 100개를 저장하는데 메모리 bit값을 그대로 저장하자
//int 100개 = sizeof(int) * 100 = 400 bytes

array<int, 100 >a{};
iota(a.begin(), a.end(), 1);		순서대로 숫자를 채우는 함수 - iota(시작주소, 끝주소, 시작숫자)	헤더 numeric
ofstream out{ "int100개를메모리그대로저장.txt",ios::binary };
out.write((const char*)a.data(), a.size() * sizeof(int));





//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라

ifstream in{"int100개를메모리그대로저장.txt" ,ios::binary };
	if (not in)
	{
		cout << "파일열기 실패";
		exit(0);
	}
		
	array<int, 100> a;		//Dog로 바꿔서 해보자
	in.read((char*)a.data(), 400);
	for (int num : a)
		cout << num << endl;
		


//문제 "FileName.cpp"의 모든 소문자를 대문자로 바꿔 "stl대문자.txt"에 저장하라
ifstream in{ "FileName.cpp" };
if (not in)
	return 123456;

ofstream out{ "stl대문자.txt" };

char c;
in >> noskipws;
while (in >> c)
{
	c = toupper(c);
	out << c;
}



// 문제 dogs를 binary mode/write 로 파일에 기록하라
// 기록된 파일을 읽어서 num값이 가장 큰 dog를 찾아 화면에 출력하라


ifstream in{ "Dog100개를메모리그대로저장.txt" ,ios::binary };
if (not in)
{
	cout << "파일열기 실패";
	exit(0);
}
int count = 0;
array<Dog, 100> a;		
in.read((char*)a.data(), 0);

auto pos = max_element(a.begin(), a.end(), [](const Dog& a, const Dog& b) {return a < b; });			// class Dog에 비교연산자<를 오버로딩하여 비교
friend bool operator<(const Dog& lhs, const Dog& rhs)
{
	return lhs.num < rhs.num;
}

auto pos = max_element(a.begin(), a.end(), [](const Dog& a, const Dog& b) {return a.getN() < b.getN(); });	// Dog의 num을 get하는 getN()을 사용하여 비교
pos->show();


for (Dog d : a)
{
	cout << d << " - " << count << endl;
	count++;
}





array<String, 100>a;
//문제 a에 "FileName.cpp"에 있는 단어를 저장하라
//a를 길이 오름차순으로 정렬하라
//화면에 a를 출력하라

array<String, 100>a;
ifstream in{ "FileName.cpp" };
if (not in)
	return 123456;


for (int i = 0; i < 100; ++i)
	in >> a[i];

sort(a.begin(), a.end(), [](const String& a, const String& b) {return  a.getLen() < b.getLen(); });

for (const String& str : a)
	cout << str << endl;










//문제 키보드에서 입력한 int값의 합계와 평균을 출력하라
//문제 키보드에서 입력한 String을 길이 오름차순 정렬하여 출력하라
	
vector<int> v{ istream_iterator<int>{cin},{} };		//cin - 키보드 입력  {}키보드 입력 끝

int sum = accumulate(v.begin(), v.end(), 0);
cout << "합계 " << sum << endl;
cout << "평균 " << format("{:.2f}", sum / (double)v.size()) << endl;

