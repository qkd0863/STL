//문제 int 100개를 저장하는데 메모리 bit값을 그대로 저장하자
//int 100개 = sizeof(int) * 100 = 400 bytes


//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


// 문제 dogs를 binary mode/write 로 파일에 기록하라
// 기록된 파일을 읽어서 num값이 가장 큰 dog를 찾아 화면에 출력하라


// 문제 "Dog.txt" 파일은 binary 모드로 기록되었다
// 여기에는 몇 개인지 모르는 class Dog 객체를 write 함수를 사용하여 기록하였다
// class Dog의 멤버는 다음과 같다
// 파일을 읽어 num값이 가장 큰 Dog 객체를 화면에 출력하라
// 파일을 읽어 num값이 1000미만인 Dog 객체를 화면에 출력하라


// 문제 프로그램에서 이용할 수 있는 전역변수의 최대 크기는?


// 문제 사용자가 입력한 int num 만큼 메모리를 동적할당하라
// int를 num개 동적할당한다
// 이 메모리를 1부터 시작하는 정수로 채운다
// 이 메모리의 합계를 화면에 출력한다
// 이 모든 과정을 영원히 반복하라


//문제 "FileName.cpp"의 모든 소문자를 대문자로 바꿔 "stl대문자.txt"에 저장하라



//문제 [10000, 99999] 범위의 값을 갖는 int 100개를 만들어라
// qsort를 사용하여 오름차순으로 정렬하시오
// 정렬한 결과를 화면에 출력하세요


//문제 [1, 1000] 범위의 값을 갖는 int 100개를 만들어라
// std::sort를 사용하여 오름차순으로 정렬하시오
// 정렬한 결과를 화면에 출력하세요


array<String, 100>a;
//문제 a에 "FileName.cpp"에 있는 단어를 저장하라
//a를 길이 오름차순으로 정렬하라
//화면에 a를 출력하라


//문제 키보드에서 입력한 int값의 합계와 평균을 출력하라
//문제 키보드에서 입력한 String을 길이 오름차순 정렬하여 출력하라


// 문제 FileName.cpp 에 있는 알파벳 소문자의 출현 횟수를 다음과 같이 출력하라
// a - 20
// b - 3
// c - 1
// ...
// z - 2
//islower() - 알파벳 소문자 판별	iswlower



vector<int> v{ 1,2,3,4,5 };
//문제 v에서 3을 제거하고 출력하라
// erase-remove idiom

//문제 v에서 홀수를 제거하라


vector<String> v{ "1","2","3","4","5","3","33"};
//문제 v에서 "3"을 삭제하라


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	list<String> name1{ "이준","이현","이서","서아","은우" };
	list<String> name2{ "하준","연우","시우","지안","도윤","서윤" };
	
	name1.sort();	//이미 <연산자를 코딩해서 디폴트 sorting 가능
	name2.sort();
	// 문제 리스트 2개를 하나로 합쳐라
	관찰 = true;
	name1.merge(name2);
	관찰 = false;
	// 미리 리스트를 sorting해야 한다

	for (const String& s : name1)
		cout << s << endl;
	
	for (const String& s : name2)
		cout << s << endl;







//문제 "FileName.cpp"의 소문자를 list<char>에 push_back()으로 저장하라
	//출력하라
	//모든 소문자가 다 있나 확인하라


	ifstream in{ "FileName.cpp" };
	if (not in)
		return 12345;
	char c;
	vector<char> List;
	//list<char> List;
	
	while (in >> c)
		if (islower(c))
			List.push_back(c);
	sort(List.begin(), List.end());
	auto p = unique(List.begin(), List.end());
	List.erase(p, List.end());			//지워줘야한다
	//List.sort();	
	//List.unique();

	for (const char& c : List)
		cout << c;
	cout << endl;

	
	if (List.size() == 26)
		cout << "모든 문자가 있다" << endl;
	else
		cout << "없다" << endl;






string s{ "1357924680" };
	// 문제  다음 문장이 실행되게 하라
	// 문제 거꾸로 출력하라

	//span<char> sp{ s.begin(),s.end() };
	//for (auto i = sp.rbegin(); i != sp.rend(); ++i)
	//	cout << *i << ' ';
	//cout << endl;

	//for (auto i = s.begin(); i != s.end(); ++i)
	//	cout << *i << ' ';
	//cout << endl;

	//for (auto i = s.rbegin(); i != s.rend(); ++i)
	//	cout << *i << ' ';
	//cout << endl;



template<class 반복자,class 값>
반복자 my_find(반복자 begin, 반복자 end, 값 val)
{
	while (begin != end)
	{
		if (*begin == val)
			return begin;
		++begin;
	}
	return begin;
};


String s{ "20240513 - stl container iterator algorithm" };
	
	// 문제 사용자가 찾는 글자가 s에 있는지 알려주자

	while (1)
	{
		cout << "찾을 문자는?";
		char ch;
	/*	auto p = my_find(s.begin(), s.end(), ch);
		if (p != s.end())
			cout << "위치 - " << "을 찾음" << endl;
		else
			cout << ch << "는 s에 없는 글자입니다" << endl;*/
	}



//문제 "이상한 나라의 앨리스.txt" 파일에 있는 단어를 set에 읽어와라

	set<String,std::less<String>> s;

	ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 123456;
	
	
	s = { istream_iterator<String>{in}, {} };

	//String temp;
	//while (in >> temp)
	//	s.insert(temp);

	for (const String& t : s)
		cout << t << endl;
	cout << s.size() << endl;


//문제 "이상한 나라의 앨리스.txt" 파일에 있는 단어를 set에 읽어와라
	//set은 단어길이기준 오름차순으로 정렬해야 한다
	//set은 대문자로 시작하는 단어가 먼저 나와야 한다


	multiset<String, 람다> s; //(*)==함수
	//set<String, bool(*)(const String&, const String&)> s{ comp }; //(*)==함수

	ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 123456;
	
	
	s = { istream_iterator<String>{in}, {} };

	//String temp;
	//while (in >> temp)
	//	s.insert(temp);

	for (const String& t : s)
		cout << t << " ";
	cout << s.size() << endl;



//문제 "이상한 나라의 앨리스.txt" 파일에 있는 단어를 mutiset에 읽어왔다
	

	multiset<String> s; //(*)==함수
	ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 123456;
	
	
	s = { istream_iterator<String>{in}, {} };
	// 문제 찾는 단어가 set에 있는지 알려준다
	while (true)
	{
		cout << "찾을 단어는?";
		String word;
		cin >> word;

		if (s.find(word) != s.end())	//s.contains(word) 이 단어가 있는지 bool로 반환
			cout << word << "는 앨리스에 있는 단어입니다" << endl;
		else
			cout << "그런 단어 없습니다" << endl;
	}
	cout << s.size();



//문제 "이상한 나라의 앨리스.txt" 파일에 있는 단어를 mutiset에 읽어왔다
	

	multiset<String> s; //(*)==함수
	ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 123456;
	
	
	s = { istream_iterator<String>{in}, {} };
	// 문제 찾는 단어가 일부라도 포함된 단어를 모두 출력하라
	// app -> apple
	while (true)
	{
		cout << "찾을 단어는?";
		String word;
		cin >> word;

		for (const String& s : s)
		{
			auto p = search(s.begin(), s.end(), word.begin(), word.end());
			if (p != s.end())
				cout << s << " ";
			// s는 word를 포함하고 있나?
		}
			
			
		

		
	}




//문제 "이상한 나라의 앨리스.txt" 파일에 있는 단어를 mutiset에 읽어왔다
	

	multiset<String> s; //(*)==함수
	ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 123456;
	
	
	s = { istream_iterator<String>{in}, {} };
	// 문제 찾는 단어가 일부라도 포함된 단어를 모두 출력하라
	// app -> apple
	while (true)
	{
		cout << "찾을 단어는?";
		String word;
		cin >> word;

		set<String> F;
		for (const String& s : s)
		{
			// 문제 단어를 1개씩만 출력되게하라 - multiset을 바꾸지 마라
			auto p = search(s.begin(), s.end(), word.begin(), word.end());
			if (p != s.end() && !F.contains(s))
			{
				cout << s << " ";
				F.insert(s);
			}

			
				

			// s는 word를 포함하고 있나?
		}
			
			
		

		
	}
	




//문제 "이상한 나라의 앨리스.txt"파일을 한 번 읽어서 
	//소문자와 출현횟수를 다음과 같이 출력하라
	// a - 333
	// b - 444
	// ..  z - 10


	ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 12345;
	char c;
	map<char, int> m;
	while (in >> c)
	{
		if (isalpha(c))
			m[tolower(c)]++;
	}

	for (auto [소문자, 개수] : m)
		cout << 소문자 << " - " << 개수 << endl;

	



//문제 "이상한 나라의 앨리스.txt"파일을 한 번 읽어서 
	//소문자와 출현횟수를 다음과 같이 출력하라
	// a - 333
	// b - 444
	// ..  z - 10


	ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 12345;
	char c;
	map<char, int> m;
	while (in >> c)
	{
		if (isalpha(c))
			m[tolower(c)]++;
	}

	for (auto [소문자, 개수] : m)
		cout << 소문자 << " - " << 개수 << endl;

	//문제 개수 내림차순으로 출력하라

	//map<int, char, greater<int>> icm;
	map<int, char> icm;
	for (auto [소문자, 개수] : m)
		icm[개수] = 소문자;

	cout << "개수 기준으로 정렬" << endl;

	for (auto [개수, 소문자] : icm | views::reverse)	//#include ranges
		cout << 소문자 << " - " << 개수 << endl;

	//for (auto p = icm.rbegin(); p != icm.rend(); ++p)
	//	cout << p->second << " - " << p->first << endl;

	//for (auto [개수, 소문자] : icm)
	//	cout << 소문자 << " - " << 개수 << endl;

