


====================================================================================================
FileName.cpp, 저장시간: 2024-03-05 화요일 오전 12:52:40 
====================================================================================================
#include "save.h"

#include <iostream>
#include <chrono>
#include <vector>
#include <fstream>

using namespace std;
void save(string_view fileName);

int main()
{


	save("FileName.cpp");
}



void save(string_view fileName)
{
	//fileName을 읽을 파일로 연다
	ifstream in{ fileName.data() };
	if (not in)
	{
		cout << fileName << " - 파일 열기 실패" << endl;
		exit(0);
	}

	//저장한 파일을 덧붙여 쓰기모드로 연다
	ofstream out("2024 1학기 STL 월910화78 강의저장.txt", ios::app);

	//저장한 시간을 기록한다
	out << endl << endl << endl;
	auto now = chrono::system_clock::now();	//epoch로 부터 증가한 tick
	auto time = chrono::system_clock::to_time_t(now);	//UTC 시간으로 변환
	auto lt = localtime(&time); //현지 시간으로 변환

	auto old = out.imbue(locale("ko_KR"));
	//날짜를 내 마음대로 출력한다
	out << "====================================================================================================" << endl;
	out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
	out << "====================================================================================================" << endl;
	out.imbue(old);

	//읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다
	//STL 자료구조와 알고리즘을 이용해 본다, 좋은 코딩은 아니다
	vector<char> v{ istreambuf_iterator<char>{in},{} };
	copy(v.begin(), v.end(), ostreambuf_iterator<char>{out});

	/*for (char c : v)
		out << c;*/

}




====================================================================================================
FileName.cpp, 저장시간: 2024-03-05 화요일 오전 12:53:49 
====================================================================================================
#include "save.h"


int main()
{


	save("FileName.cpp");
}






====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 3:43:09 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog
{
	char c{ (char)uidChar(dre) };
	int num{ uidNum(dre) };
public:
	Dog()
	{
		//cout << "디폴트 생성" << endl;
	}
	friend ostream& operator<<(ostream& os, const Dog& dog)
	{
		return os << "글자:" << dog.c << ", 숫자" << dog.num;
	}
};



int main()
{
	array<Dog, 100> dogs;		//초기화 안해도 디폴트 생성됨


	// 문제 dogs를 binary mode/write 로 파일에 기록하라
	// 기록된 파일을 읽어서 num값이 가장 큰 dog를 찾아 화면에 출력하라

	ofstream out{ "Dog.txt",ios::binary };
	out.write((const char*)dogs.data(), sizeof(Dog) * 100);

	for (Dog dog : dogs)
		cout << dog << endl;

	cout << endl << endl;


	array<Dog, 100> dogs_read;

	ifstream in{ "Dog.txt",ios::binary };
	if (not in)
	{
		cout << "파일열기 실패";
		exit(0);
	}

	in.read((char*)dogs_read.data(), sizeof(Dog) * 100);
	for (Dog dog : dogs_read)
		cout << dog << endl;


	//auto pos = max_element(dogs_read.begin(), dogs_read.end());
	//cout << "최댓값:" << *pos << endl;



	save("FileName.cpp");
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 3:49:11 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog
{
	char c{ (char)uidChar(dre) };
	int num{ uidNum(dre) };
public:
	Dog()
	{
		//cout << "디폴트 생성" << endl;
	}
	friend ostream& operator<<(ostream& os, const Dog& dog)
	{
		return os << "글자:" << dog.c << ", 숫자" << dog.num;
	}
};



int main()
{
	array<Dog, 100> dogs;		//초기화 안해도 디폴트 생성됨


	// 문제 dogs를 binary mode/write 로 파일에 기록하라
	// 기록된 파일을 읽어서 num값이 가장 큰 dog를 찾아 화면에 출력하라

	ofstream out{ "Dog.txt",ios::binary };
	out.write((const char*)dogs.data(), sizeof(Dog) * 100);

	for (Dog dog : dogs)
		cout << dog << endl;

	cout << endl << endl;


	array<Dog, 100> dogs_read;

	
	for (Dog dog : dogs_read)
		cout << dog << endl;


	//auto pos = max_element(dogs_read.begin(), dogs_read.end());
	//cout << "최댓값:" << *pos << endl;



	save("FileName.cpp");
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 4:06:22 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog
{
	char c{ (char)uidChar(dre) };
	int num{ uidNum(dre) };
public:
	Dog()
	{
		//cout << "디폴트 생성" << endl;
	}
	friend ostream& operator<<(ostream& os, const Dog& dog)
	{
		return os << "글자:" << dog.c << ", 숫자" << dog.num;
	}
};



int main()
{
	array<Dog, 100> dogs;		//초기화 안해도 디폴트 생성됨


	// 문제 dogs를 binary mode/write 로 파일에 기록하라
	// 기록된 파일을 읽어서 num값이 가장 큰 dog를 찾아 화면에 출력하라

	ofstream out{ "Dog.txt",ios::binary };
	out.write((const char*)dogs.data(), sizeof(Dog) * 100);

	for (Dog dog : dogs)
		cout << dog << endl;

	cout << endl << endl;


	array<Dog, 100> dogs_read;

	ifstream in{ "Dog.txt",ios::binary };
	if (not in)
	{
		cout << "파일열기 실패";
		exit(0);
	}

	in.read((char*)dogs_read.data(), sizeof(Dog) * 100);
	for (Dog dog : dogs_read)
		cout << dog << endl;


	//auto pos = max_element(dogs_read.begin(), dogs_read.end());
	//cout << "최댓값:" << *pos << endl;



	save("FileName.cpp");
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 6:36:10 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//-----------------------------------------------------------------
// 2024.03.018 1학기 stl 화 5~6 목 5~6                       (3주 1)
// 
//-----------------------------------------------------------------



//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };


// 문제 "Dog.txt" 파일은 binary 모드로 기록되었다
// 여기에는 몇 개인지 모르는 class Dog 객체를 write 함수를 사용하여 기록하였다
// class Dog의 멤버는 다음과 같다
// 파일을 읽어 num값이 가장 큰 Dog 객체를 화면에 출력하라

class Dog
{
	char c;
	int num;
public:
	int getN()const 
	{
		return num;
	}
	void show()const
	{
		cout << "char - " << c << ", num - " << num << endl;
	}
	friend istream& operator>>(istream& is, Dog& dog)
	{
		return is.read((char*)&dog, sizeof(Dog));
	}
	
};

int main()
{
	

	ifstream in{ "Dog.txt",ios::binary };
	if (not in)
	{
		cout << "파일 열기 실패" << endl;
		exit(0);
	}
	

	//마지막 Dog   char - i, num - 38857
	//가장 큰 Dog:char - y, num - 99646

	array<Dog, 100> dogs_read;
	in.read((char*)dogs_read.data(), sizeof(Dog) * 100);
	for (Dog d : dogs_read)
		d.show();
	
	
	auto pos=max_element(dogs_read.begin(), dogs_read.end(), [](const Dog& a, const Dog& b) {return a.getN() < b.getN(); });
	//begin=a end=b, b-a == 800  -> a의 type이 뭐야? -> a의 type으로 나눠서 개수를 알아낸다
	
	cout << "num 값이 가장 큰 Dog:";
	pos->show();





	save("FileName.cpp");
}




//Dog dog;
//int count{};
//while (in >> dog)
//count++;
//cout << "개수:" << count << endl;
//dog.show();


// dogs.data() == 시작주소


====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 6:52:25 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//-----------------------------------------------------------------
// 2024.03.018 1학기 stl 화 5~6 목 5~6                       (3주 1)
// 
//-----------------------------------------------------------------



//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };


// 문제 "Dog.txt" 파일은 binary 모드로 기록되었다
// 여기에는 몇 개인지 모르는 class Dog 객체를 write 함수를 사용하여 기록하였다
// class Dog의 멤버는 다음과 같다
// 파일을 읽어 num값이 1000미만인 Dog 객체를 화면에 출력하라

class Dog
{
	char c;
	int num;
public:
	int getN()const 
	{
		return num;
	}
	void show()const
	{
		cout << "char - " << c << ", num - " << num << endl;
	}
	friend istream& operator>>(istream& is, Dog& dog)
	{
		return is.read((char*)&dog, sizeof(Dog));
	}
	
};

int main()
{
	

	ifstream in{ "Dog.txt",ios::binary };
	if (not in)
	{
		cout << "파일 열기 실패" << endl;
		exit(0);
	}
	

	//마지막 Dog   char - i, num - 38857
	//가장 큰 Dog:char - y, num - 99646

	array<Dog, 100> dogs_read;
	in.read((char*)dogs_read.data(), sizeof(Dog) * 100);
	for (Dog d : dogs_read)
		d.show();
	
	
	auto pos=max_element(dogs_read.begin(), dogs_read.end(), [](const Dog& a, const Dog& b) {return a.getN() < b.getN(); });
	//begin=a end=b, b-a == 800  -> a의 type이 뭐야? -> a의 type으로 나눠서 개수를 알아낸다
	
	cout << "num 값이 가장 큰 Dog:";
	pos->show();

	auto p = count_if(dogs_read.begin(), dogs_read.end(), [](const Dog& dog) {return 1000 > dog.getN(); }); //숫자는 왼쪽에 쓰자
	cout << p;

	int cnt{};
	for (Dog d : dogs_read)
		if (d.getN() < 1000)
			cnt++;
		
	cout << "num 값이 1000 미만인 개수:" << cnt << endl;





	save("FileName.cpp");
}




//Dog dog;
//int count{};
//while (in >> dog)
//count++;
//cout << "개수:" << count << endl;
//dog.show();


// dogs.data() == 시작주소


====================================================================================================
FileName.cpp, 저장시간: 2024-03-19 화요일 오후 4:09:03 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
//-----------------------------------------------------------------
// 2024.03.19 1학기 stl 화 5~6 목 5~6                       (3주 2)
// 
// 실행 파일의 메모리 영역 - stack code data free store(heap)
//-----------------------------------------------------------------

void f()
{
	int num{123};

	cout << "나는 함수 f 입니다" << endl;
	cout << "f()의 변수 num " << addressof(num) << endl;
}



int gnum{};
string s{"전역 스트링"};






int main()
{
	string s{ "메모리 관찰" };
	cout << "지역 객체 string - " << addressof(s) << endl;

	array<int, 10> a;
	cout << "지역 객체 array<int,10> " << endl;
	for (int i = 0; i < a.size(); ++i)
		cout << "a[" << i << "]" << addressof(a[i]) << endl;

	f();


	cout << "전역 string - " << ::s << endl;
	cout << addressof(::s) << endl;
	cout << "전역 int - " << endl;
	cout << addressof(gnum) << endl;

	cout << endl << endl;
	cout << "함수가 기록되는 메모리 영역 - CODE segment, TEXT segment" << endl;
	cout << "main() - " << addressof(main) << endl;
	cout << "f() - " << addressof(f) << endl;
	cout << "save() - " << addressof(save) << endl;


	string* p = new string[2]{ "동적할당한 string1","동적할당한 string2" };
	cout << endl << endl;

	cout << p[0]<< " - " << addressof(p[0]) << endl;
	cout << p[1]<< " - " << addressof(p[1]) << endl;


	save("FileName.cpp");
}



// 실제로 실행해보면 메모리 위치가 다르다


====================================================================================================
FileName.cpp, 저장시간: 2024-03-19 화요일 오후 5:21:13 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
//-----------------------------------------------------------------
// 2024.03.19 1학기 stl 화 5~6 목 5~6                       (3주 2)
// 
// 실행 파일의 메모리 영역 - stack code data free store(heap)
//-----------------------------------------------------------------


// 문제 프로그램에서 이용할 수 있는 전역변수의 최대 크기는?

int num[100000000]{};	//초기화 하지 않은 data == default로 초기화한 data
//int num[100000000]{1};  //num[0]만 초기화 할 수 없다, 400mb이미지를 복사해야한다

int main(){
	num[99999999] = 1234567890;
	cout << num[99999999] << endl;
	cout << "키를 누르면 프로그램 끝 - ";
	char c;
	cin >> c;

	

	save("FileName.cpp");
}
	


// 실제로 실행해보면 메모리 위치가 다르다	


====================================================================================================
FileName.cpp, 저장시간: 2024-03-25 월요일 오후 6:27:20 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
//-----------------------------------------------------------------
// 2024.03.25 1학기 stl 화 5~6 목 5~6                       (4주 1)
// 
// 메모리 동적할당 - RAII
//-----------------------------------------------------------------


// 문제 사용자가 입력한 int num 만큼 메모리를 동적할당하라
// int를 num개 동적할당한다
// 이 메모리를 1부터 시작하는 정수로 채운다
// 이 메모리의 합계를 화면에 출력한다
// 이 모든 과정을 영원히 반복하라

// -> run-time에서야 num값이 결정된다 --> new T[num]
// -> complie time에 모든 값이 결정 --> constexpr

int main()
{
	save("FileName.cpp");

	int num;
	while (1)
	{

		cout << "숫자를 입력하라 - ";
		cin >> num;

		int* p = new int[num];
		iota(p, p + num, 1);
		long long sum = accumulate(p, p + num, 0LL);  // 0울 int로 계산하기 때문에 값이 다르게 나온다 LL을 붙여 long long 으로 바꿔줘야 한다


		cout << "합계 - " << sum << endl;


		delete[] p;		// new와 짝이 맞는 delete를 코딩
	}

	
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-25 월요일 오후 6:56:45 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
//-----------------------------------------------------------------
// 2024.03.25 1학기 stl 화 5~6 목 5~6                       (4주 1)
// 
// 메모리 동적할당 - RAII
// 
// 앞으로 c++ 에서 사용하지 않아야 할 것들
// char*  -> string 
// T[N]  -> array<T,N>
// T*    -> unique_ptr, shared_ptr( 스마트 포인터로 대체)
//-----------------------------------------------------------------


// 문제 사용자가 입력한 int num 만큼 메모리를 동적할당하라
// int를 num개 동적할당한다
// 이 메모리를 1부터 시작하는 정수로 채운다
// 이 메모리의 합계를 화면에 출력한다
// 이 모든 과정을 영원히 반복하라

// -> run-time에서야 num값이 결정된다 --> new T[num]
// -> complie time에 모든 값이 결정 --> constexpr

class Dog
{
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};
void f() 
{
	cout << "f 시작" << endl;
	Dog* p;
	{//예외 발생
		p = new Dog;
		throw 1234;		// catch 라인으로 이동
	}

	delete p;
	cout << "f 종료" << endl;
};

int main()
{
	save("FileName.cpp");
	cout << "메인 시작" << endl;

	try
	{
		f();// 자원을 확보하고 정리하는 함수
	}
	catch (...)
	{

	}

	cout << "메인 끝" << endl;
}




// 메모리 해제를 까먹음
// 메모리를 여러번 해제함 - dangling 프로그램이 바로 죽는다
// 지역을 벗어나면 반드시 소멸한다 - 연결시켜줘야한다



====================================================================================================
FileName.cpp, 저장시간: 2024-03-25 월요일 오후 7:04:58 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
//-----------------------------------------------------------------
// 2024.03.25 1학기 stl 화 5~6 목 5~6                       (4주 1)
// 
// 메모리 동적할당 - RAII
// 
// 앞으로 c++ 에서 사용하지 않아야 할 것들
// char*  -> string 
// T[N]  -> array<T,N>
// T*    -> unique_ptr, shared_ptr( 스마트 포인터로 대체)
//-----------------------------------------------------------------


// 문제 사용자가 입력한 int num 만큼 메모리를 동적할당하라
// int를 num개 동적할당한다
// 이 메모리를 1부터 시작하는 정수로 채운다
// 이 메모리의 합계를 화면에 출력한다
// 이 모든 과정을 영원히 반복하라

// -> run-time에서야 num값이 결정된다 --> new T[num]
// -> complie time에 모든 값이 결정 --> constexpr

class Dog
{
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};


// RAII idiom(관용구) - 메모리, 파일, jthread

class Smart_ptr
{
	Dog* p;
public:
	Smart_ptr(Dog* p):p{p}{}
	~Smart_ptr()
	{
		delete p;
	}
};

void f() 
{
	cout << "f 시작" << endl;
	
	{//예외 발생
		Smart_ptr p{ new Dog };	// stack-unwinding   c++ 언어가 보장
		throw 1234;		// catch 라인으로 이동
	}


	cout << "f 종료" << endl;
};

int main()
{
	save("FileName.cpp");
	cout << "메인 시작" << endl;

	try
	{
		f();// 자원을 확보하고 정리하는 함수
	}
	catch (...)
	{

	}

	cout << "메인 끝" << endl;
}




// 메모리 해제를 까먹음
// 메모리를 여러번 해제함 - dangling 프로그램이 바로 죽는다
// 지역을 벗어나면 반드시 소멸한다 - 연결시켜줘야한다
// 예외 처리가되면 소멸이 안될 수 있다



====================================================================================================
FileName.cpp, 저장시간: 2024-03-26 화요일 오후 3:50:34 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
#include <memory>
//-----------------------------------------------------------------
// 2024.03.26 1학기 stl 화 5~6 목 5~6                       (4주 2)
// 
// 
//-----------------------------------------------------------------



class Dog
{
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};

int main()
{
	save("FileName.cpp");
	unique_ptr<Dog[]> p = make_unique<Dog[]>(3);

}





====================================================================================================
FileName.cpp, 저장시간: 2024-03-26 화요일 오후 4:08:54 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
#include <memory>
//-----------------------------------------------------------------
// 2024.03.26 1학기 stl 화 5~6 목 5~6                       (4주 2)
// 
// 
//-----------------------------------------------------------------


//문제 "FileName.cpp"의 모든 소문자를 대문자로 바꿔 "stl대문자.txt"에 저장하라

int main()
{
	save("FileName.cpp");
	

	ifstream in{ "FileName.cpp",ios::binary};
	if (not in)
		return 33333333;

	ofstream out{ "stl대문자.txt",ios::binary };
	char c;
	
	while (in.read(&c, sizeof(char)))
		out << (c = toupper(c));	
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-26 화요일 오후 4:12:39 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
#include <memory>
//-----------------------------------------------------------------
// 2024.03.26 1학기 stl 화 5~6 목 5~6                       (4주 2)
// 
// 
//-----------------------------------------------------------------


//문제 "FileName.cpp"의 모든 소문자를 대문자로 바꿔 "stl대문자.txt"에 저장하라

int main()
{
	save("FileName.cpp");
	

	ifstream in{ "FileName.cpp"};
	if (not in)
		return 33333333;

	ofstream out{ "stl대문자.txt"};
	char c;
	
	in >> noskipws;		// 공백을 건너뛰지 말아라
	while (in >> c)
	{
		c = toupper(c);
		cout << c;
	}
		
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-26 화요일 오후 4:26:26 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
#include <memory>
#include <algorithm>
//-----------------------------------------------------------------
// 2024.03.26 1학기 stl 화 5~6 목 5~6                       (4주 2)
// 
// 
//-----------------------------------------------------------------


//문제 "FileName.cpp"의 모든 소문자를 대문자로 바꿔 "stl대문자.txt"에 저장하라

int main()
{
	save("FileName.cpp");
	

	ifstream in{ "FileName.cpp"};
	if (not in)
		return 33333333;

	ofstream out{ "stl대문자.txt"};
	
	transform(istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{out}, [](char c) {return c = toupper(c);});
		
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-26 화요일 오후 5:15:33 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
#include <memory>
#include <algorithm>
#include <random>
#include <print>

//-----------------------------------------------------------------
// 2024.03.26 1학기 stl 화 5~6 목 5~6                       (4주 2)
// 
// 
//-----------------------------------------------------------------

//문제 [10000, 99999] 범위의 값을 갖는 int 100개를 만들어라
// qsort를 사용하여 오름차순으로 정렬하시오
// 정렬한 결과를 화면에 출력하세요


default_random_engine dre;
uniform_int_distribution uidNum{ 1,1000 };


int static compare(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;
}


int main()
{
	(*save)("FileName.cpp");	//함수 포인터 참조
	
	array<int,100> num;

	for (int& n : num)
		n = uidNum(dre);	
	
	//qsort로 정렬 - generic 함수라서 여기서 시작

	qsort(num.data(), num.size(), sizeof(int), [](const void* a, const void* b){
		return *(int*)a - *(int*)b;		//음수,0,양수
		});

	qsort(num.data(), num.size(), sizeof(int), compare);

	for (int n : num)
		print("{:8}", n);

}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-26 화요일 오후 5:17:44 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
#include <memory>
#include <algorithm>
#include <random>
#include <print>

//-----------------------------------------------------------------
// 2024.03.26 1학기 stl 화 5~6 목 5~6                       (4주 2)
// 
// 
//-----------------------------------------------------------------

//문제 [10000, 99999] 범위의 값을 갖는 int 100개를 만들어라
// qsort를 사용하여 오름차순으로 정렬하시오
// 정렬한 결과를 화면에 출력하세요


default_random_engine dre;
uniform_int_distribution uidNum{ 1,1000 };


int static compare(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;
}


int main()
{
	save("FileName.cpp");	//함수 포인터 참조
	
	auto a = compare;
	cout << typeid(a).name() << endl;

}


====================================================================================================
FileName.cpp, 저장시간: 2024-04-01 월요일 오후 5:59:17 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
#include <memory>
#include <algorithm>
#include <random>
#include <print>

//-----------------------------------------------------------------
// 2024.04.1 1학기 stl				                        (5주 1)
// 
// 
// callable type
// 어떤 함수에 다른 함수를 전달한다
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다
// 2. 람다를 전달한다
//-----------------------------------------------------------------

//문제 [1, 1000] 범위의 값을 갖는 int 100개를 만들어라
// std::sort를 사용하여 오름차순으로 정렬하시오
// 정렬한 결과를 화면에 출력하세요


default_random_engine dre;
uniform_int_distribution uidNum{ 1,1000 };

int fcbt{};
bool f(int a, int b)
{
	fcbt++;
	return a > b;
}



int main()
{
	save("FileName.cpp");	//함수 포인터 참조
	array<int, 1000> num{};
	for (int& i : num)
		i = uidNum(dre);
	

	// std::sort 정렬 -default 오름차순(asending order)
	sort(num.begin(), num.end(), [](int a, int b) {return a < b; });


	for (int i : num)
		print("{:8}", i);

	cout << "횟수:" << fcbt;
}






====================================================================================================
FileName.cpp, 저장시간: 2024-04-01 월요일 오후 6:20:26 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
#include <memory>
#include <algorithm>
#include <random>
#include <print>

//-----------------------------------------------------------------
// 2024.04.1 1학기 stl				                        (5주 1)
// 
// 
// callable type - 무한개의 타입이 있다
// 어떤 함수에 다른 함수를 전달한다
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다
// 2. 람다를 전달한다
// 3. ()연산자를 오버로딩한 클래스의 객체를 전달한다 (funtion call - () )
// 1과 2,3의 다른점 - 2,3은 상태를 가질 수 있다
//-----------------------------------------------------------------

//문제 [1, 1000] 범위의 값을 갖는 int 100개를 만들어라
// std::sort를 사용하여 오름차순으로 정렬하시오
// 정렬한 결과를 화면에 출력하세요


default_random_engine dre;
uniform_int_distribution uidNum{ 1,1000 };


class Dog
{
	int m;
public:
	bool operator()(int a, int b)		// 함수 호출 연산자 - ()
	{
		//return a + m < b;
		return a < b;
	}
};


int main()
{
	save("FileName.cpp");	//함수 포인터 참조
	array<int, 1000> num{};
	for (int& i : num)
		i = uidNum(dre);
	
	Dog dog;
	// std::sort 정렬 -default 오름차순(asending order)
	std::sort(num.begin(), num.end(), Dog{});


	for (int i : num)
		print("{:8}", i);

}






====================================================================================================
FileName.cpp, 저장시간: 2024-04-01 월요일 오후 7:05:30 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
#include <memory>
#include <algorithm>
#include <random>
#include <print>
#include <functional>

//-----------------------------------------------------------------
// 2024.04.1 1학기 stl				                        (5주 1)
// 
// 
// callable type - 무한개의 타입이 있다
// 어떤 함수에 다른 함수를 전달한다
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다
// 2. 람다를 전달한다 - visual studio는 함수 객체로 구현
// 3. ()연산자를 오버로딩한 클래스의 객체를 전달한다 (funtion call - () )
//  함수 객체(function object)
// 1과 2,3의 다른점 - 2,3은 상태를 가질 수 있다
// 
// 호출가능한 타입을 대표하는 타입을 만들었다 - function 
// 
//-----------------------------------------------------------------


class String
{
	size_t len{};
	unique_ptr<char[]> p;
public:
	String(const char* s):len(strlen(s))
	{
		p = make_unique<char[]>(len);
		memcpy(p.get(), s, len);
	}

	friend ostream& operator<<(ostream& os, const String& str)
	{
		for (size_t i = 0; i < str.len; ++i)
			os << str.p.get()[i];
		return os;
	}
};



int main()
{
	save("FileName.cpp");
	String s{ "STL을 관찰하기 위한 클래스입니다" };
	//String t = s;
	cout << s << endl;
	//cout << t << endl;
}






====================================================================================================
FileName.cpp, 저장시간: 2024-04-02 화요일 오후 4:37:25 
====================================================================================================
#include <string>
#include <array>
#include <numeric>
#include <memory>
#include <algorithm>
#include <random>
#include <print>
#include <functional>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.2 1학기 stl				                        (5주 2)
// 
// 
//-----------------------------------------------------------------




int main()
{
	save("FileName.cpp");
	
	array<String, 5> a{ "2024년","4월","2일","화요일","STL시간" };
	
	
	// sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라

	sort(a.begin(), a.end(), [](const String& x, const String& y) {return x.getLen() < y.getLen(); });

	for (String& s : a)
		cout << s << endl;





}



//String t = s;		//디폴트 복사생성자를 만들 수 없다 - 스마트포인터는 복사생성이 불가


====================================================================================================
FileName.cpp, 저장시간: 2024-04-02 화요일 오후 5:17:08 
====================================================================================================
#include <string>
#include <array>
#include <numeric>
#include <memory>
#include <algorithm>
#include <random>
#include <print>
#include <functional>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.2 1학기 stl				                        (5주 2)
// 
// 
//-----------------------------------------------------------------

extern bool 관찰;


int main()
{
	save("FileName.cpp");
	
	array<String, 5> a{ "dsadsadasdad","sadasfsafasd","wqewqreqe","wqewqrqwwe","xzczxcvzxc" };
	
	
	// sort를 사용하여 a가 관리하는 String을 오름차순으로 정렬한 후 출력하라

	관찰 = true;

	for (const String& s : a)
		sort(s.getMem(), s.getMem() + s.getLen());
	관찰 = false;

	for (String& s : a)
		cout << s << endl;





}



//String t = s;		//디폴트 복사생성자를 만들 수 없다 - 스마트포인터는 복사생성이 불가


====================================================================================================
FileName.cpp, 저장시간: 2024-04-08 월요일 오후 6:37:28 
====================================================================================================
#include <array>
#include <list>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.8 1학기 stl				                        (6주 1)
// 
// STL - Container
// 
// Containers are objects that store other objects 컨테이너는 다른 오브젝트를 저장하는 오브젝트
// 오브젝트 - 클래스로 만들어진 객체
//-----------------------------------------------------------------

extern bool 관찰;


int main()
{
	save("FileName.cpp");
	array<int, 10>a{1,3,5,7,9,2,4,6,8,10};
	for (array<int, 10>::iterator p = a.begin(); p != a.end(); ++p)
		cout << p.operator*() << endl;

}



====================================================================================================
FileName.cpp, 저장시간: 2024-04-08 월요일 오후 6:56:52 
====================================================================================================
#include <array>
#include <list>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.8 1학기 stl				                        (6주 1)
// 
// STL - Container
// 
// Containers are objects that store other objects 컨테이너는 다른 오브젝트를 저장하는 오브젝트
// 오브젝트 - 클래스로 만들어진 객체
//-----------------------------------------------------------------

extern bool 관찰;


int main()
{
	save("FileName.cpp");
	array<int, 10>a{ 1,3,5,7,9,2,4,6,8,10 };

	int num;
	cin >> num;
	try 
	{
		a.at(num);//경계가 맞나 검사한다
	}
	catch (const exception& e)
	{
		cout << e.what() << endl;
	}
		
}

//syntactic sugar


====================================================================================================
FileName.cpp, 저장시간: 2024-04-08 월요일 오후 7:02:42 
====================================================================================================
#include <array>
#include <list>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.8 1학기 stl				                        (6주 1)
// 
// STL - Container
// 
// Containers are objects that store other objects 컨테이너는 다른 오브젝트를 저장하는 오브젝트
// 오브젝트 - 클래스로 만들어진 객체
//-----------------------------------------------------------------

extern bool 관찰;


int main()
{
	save("FileName.cpp");
	array<String, 100>a;

	//문제 a에 "FileName.cpp"에 있는 단어를 저장하라
	//a를 길이 오름차순으로 정렬하라
	//화면에 a를 출력하라

	ifstream in{ "FileName.cpp" };
	if (not in)
		return 123456;
	for (int i = 0; i < 100; ++i);
		//in >> a[i];
	
		
}

//syntactic sugar


====================================================================================================
FileName.cpp, 저장시간: 2024-04-09 화요일 오후 3:42:03 
====================================================================================================
#include <array>
#include <list>
#include <algorithm>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.9 1학기 stl				                        (6주 2)
// 
// STL - Container
// 
// Containers are objects that store other objects 컨테이너는 다른 오브젝트를 저장하는 오브젝트
// 오브젝트 - 클래스로 만들어진 객체
//-----------------------------------------------------------------

extern bool 관찰;


int main()
{
	save("FileName.cpp");
	array<String, 100>a;

	//문제 a에 "FileName.cpp"에 있는 단어를 저장하라
	//a를 길이 오름차순으로 정렬하라
	//화면에 a를 출력하라

	ifstream in{ "FileName.cpp" };
	if (not in)
		return 123456;
	for (int i = 0; i < 100; ++i)
		in >> a[i];			//operator>>(in, a[i]);
	
	sort(a.begin(), a.end(), [](const String& a,const String& b) {return a.getLen() < b.getLen(); });
	
	for (const String& s : a)
		cout << s << endl;


		
}




====================================================================================================
FileName.cpp, 저장시간: 2024-04-09 화요일 오후 4:13:21 
====================================================================================================
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.9 1학기 stl				                        (6주 2)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;


default_random_engine dre;
uniform_int_distribution uid{ 1,10000 };

int main()	
{
	save("FileName.cpp");

	// 예제 int값 num을 입력받아 v에 [1,10000]값을 갖는 int num개를 추가
	// 오름차순 정렬한다
	// 값을 출력한다
	
	while (1)
	{
		vector<int>v;
		int num;

		cout << "숫자 입력";
		cin >> num;

		for (int i = 0; i < num; ++i)
			v.push_back(uid(dre));

		sort(v.begin(), v.end());

		// 앞에서 100개만
		for (int n : v | views::take(100))
			print("{:8}", n);
	}
}



====================================================================================================
FileName.cpp, 저장시간: 2024-04-09 화요일 오후 5:06:10 
====================================================================================================
#include <vector>
#include <numeric>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.9 1학기 stl				                        (6주 2)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");


	//문제 키보드에서 입력한 int값의 합계와 평균을 출력하라
	//문제 키보드에서 입력한 String을 길이 오름차순 정렬하여 출력하라
	
	vector<int> v{ istream_iterator<int>{cin},{} };		//cin - 키보드 입력  {}키보드 입력 끝

	int sum = accumulate(v.begin(), v.end(), 0);
	cout << "합계 " << sum << endl;
	cout << "평균 " << format("{:.2f}", sum / (double)v.size()) << endl;
	
}



====================================================================================================
FileName.cpp, 저장시간: 2024-04-09 화요일 오후 5:19:19 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.9 1학기 stl				                        (6주 2)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");


	//문제 키보드에서 입력한 int값의 합계와 평균을 출력하라
	//문제 키보드에서 입력한 String을 길이 오름차순 정렬하여 출력하라
	
	vector<String> v{ istream_iterator<String>{cin},{} };		//cin - 키보드 입력  {}키보드 입력 끝

	sort(v.begin(), v.end(), [](const String& a,const String& b) {return a.getLen()< b.getLen(); });
	for (const String& s : v)
		cout << s << endl;
}



====================================================================================================
FileName.cpp, 저장시간: 2024-04-15 월요일 오후 5:27:59 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.15 1학기 stl				                        (7주 1)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");

	//문제 키보드에서 입력한 int값의 합계와 평균을 출력하라
	//문제 키보드에서 입력한 String을 길이 오름차순 정렬하여 출력하라
	
	vector<String> v{ istream_iterator<String>{cin},{} };		//cin - 키보드 입력  {}키보드 입력 끝

	sort(v.begin(), v.end(), [](const String& a,const String& b) {return a.getLen()< b.getLen(); });
	for (const String& s : v)
		cout << s << endl;
}



====================================================================================================
FileName.cpp, 저장시간: 2024-04-15 월요일 오후 6:09:46 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.15 1학기 stl				                        (7주 1)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");

	관찰 = true;
	vector<String>v;
	
	v.push_back("1");
	cout << endl << endl;
	v.push_back("22");
	cout << endl << endl;

}


====================================================================================================
FileName.cpp, 저장시간: 2024-04-15 월요일 오후 6:27:04 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include <array>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.15 1학기 stl				                        (7주 1)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");

	// 문제 FileName.cpp 에 있는 알파벳 소문자의 출현 횟수를 다음과 같이 출력하라
	// a - 20
	// b - 3
	// c - 1
	// ...
	// z - 2

	
	array<int, 26> alpha;

	ifstream in{ "FileName.cpp" };
	if (not in)
		return 123;

	char c;

	for (int& n : alpha)
		n = 0;

	while (in.read(&c, sizeof(char)))
	{
		if (static_cast<int>(c)>=97 && static_cast<int>(c)<=122)
		alpha[static_cast<int>(c)-97] += 1;
	}

	for (int i = 0; i < 26; i++)
	{
		cout << char(static_cast<int>(i + 97)) << " - " << alpha[i] << endl;
	}

}


====================================================================================================
FileName.cpp, 저장시간: 2024-04-15 월요일 오후 6:43:00 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include <array>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.15 1학기 stl				                        (7주 1)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");

	// 문제 FileName.cpp 에 있는 알파벳 소문자의 출현 횟수를 다음과 같이 출력하라
	// a - 20
	// b - 3
	// c - 1
	// ...
	// z - 2
	//islower() - 알파벳 소문자 판별
	
	array<int, 26> alpha{};//{} - 초기화
	//vector<int> a(26) - (26)으로 초기화 해야한다

	ifstream in{ "FileName.cpp" };
	if (not in)
		return 123;

	char c;

	//while(in>>c)
	while (in.read(&c, sizeof(char)))
	{
		
		//if (static_cast<int>(c)>=97 && static_cast<int>(c)<=122)
		if (iswlower(c))
			alpha[static_cast<int>(c)-97] += 1;// alpha[c - 'a'] += 1;
	}

	for (int i = 0; i < 26; i++)
	{
		cout << char(i + 97) << " - " << alpha[i] << endl;
	}

}


====================================================================================================
FileName.cpp, 저장시간: 2024-04-15 월요일 오후 7:04:19 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include <array>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.15 1학기 stl				                        (7주 1)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");

	vector<int> v{ 1,2,3,4,5 };
	//문제 v에서 3을 제거하고 출력하라
	// erase-remove idiom

	//auto p = remove(v.begin(), v.end(), 3);
	//v.erase(p, v.end());

	v.erase(remove(v.begin(), v.end(), 3), v.end());


	for (int num : v)
		cout << num << ' ' << endl;		// 1 2 4 5 5    한칸씩 땡긴다
}


====================================================================================================
FileName.cpp, 저장시간: 2024-04-16 화요일 오후 3:35:31 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include <array>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.16 1학기 stl				                        (7주 2)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");

	vector<int> v{ 1,2,3,4,5 };
	//문제 v에서 3을 제거하고 출력하라		c++20 부터는 erase(v, 3);
	// erase-remove idiom
	
	//auto p = remove(v.begin(), v.end(), 3);
	//v.erase(p, v.end());

	v.erase(remove(v.begin(), v.end(), 3), v.end());

		
	for (int num : v)
		cout << num << ' ' << endl;		// 1 2 4 5 5    한칸씩 땡긴다
}


====================================================================================================
FileName.cpp, 저장시간: 2024-04-16 화요일 오후 3:55:16 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include <array>
#include <print>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.16 1학기 stl				                        (7주 2)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");

	vector<int> v(200);
	//문제 v에서 홀수를 제거하라

	iota(v.begin(), v.end(), 1);
	erase_if(v, [](int num) {return num % 2; });
	
		

	for (int num : v)
		print("{:8}", num);
	
		
}


====================================================================================================
FileName.cpp, 저장시간: 2024-04-16 화요일 오후 4:17:14 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include <array>
#include <print>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.16 1학기 stl				                        (7주 2)
// 
// vector - dynamic array
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");

	vector<String> v{ "1","2","3","4","5","3","33"};
	
	//문제 v에서 "3"을 삭제하라

	//erase(v, "3");
	erase_if(v, [](String s) {return s == "3"; });

	for (const String& s : v)
		cout << s << endl;

		
}


====================================================================================================
FileName.cpp, 저장시간: 2024-04-16 화요일 오후 4:39:21 
====================================================================================================
#include <vector>
#include <numeric>
#include <algorithm>
#include <array>
#include <print>
#include <list>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.16 1학기 stl				                        (7주 2)
// 
// vector - dynamic array - 중간위치에서 원소 추가/삭제 지양
//-----------------------------------------------------------------

extern bool 관찰;



int main()	
{
	save("FileName.cpp");

	
	list<String> v{ "1","22","4444","55555" };
	auto p = v.begin();
	++p;
	++p;
	관찰 = true;
	v.emplace(p, "333");
	//v.insert(p, "333");
	관찰 = false;
	for (const String& s : v)
		cout << s << endl;

		
}


====================================================================================================
FileName.cpp, 저장시간: 2024-04-16 화요일 오후 5:19:05 
====================================================================================================
#include <deque>
#include <vector>
#include <list>
#include "String.h"
#include "save.h"

//-----------------------------------------------------------------
// 2024.04.16 1학기 stl				                        (7주 2)
//  
// deque - vecto와 list의 중간형태를 띄는 자료구조다
//-----------------------------------------------------------------

extern bool 관찰;

class Test
{
	char x[4096];
};

int main()	
{
	save("FileName.cpp");
	//vector<Test> v;  //1574803
	//deque<Test> v;   //2500000
	list<Test>v;	   //2500000
	while (1)
	{
		try
		{
			v.push_back(Test{});
		}
		catch (...)
		{
			cout << "끝" << endl;
			cout << v.size() << endl;
			break;
		}
		if (!(v.size() % 100000))
			cout << v.size() << endl;
	}
}                