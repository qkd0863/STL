


====================================================================================================
FileName.cpp, 저장시간: 2024-03-05 화요일 오전 12:52:40 
====================================================================================================
#include "save.h"

#include <iostream>
#include <chrono>
#include <vector>
#include <fstream>

using namespace std;
void save(string_view fileName);

int main()
{


	save("FileName.cpp");
}



void save(string_view fileName)
{
	//fileName을 읽을 파일로 연다
	ifstream in{ fileName.data() };
	if (not in)
	{
		cout << fileName << " - 파일 열기 실패" << endl;
		exit(0);
	}

	//저장한 파일을 덧붙여 쓰기모드로 연다
	ofstream out("2024 1학기 STL 월910화78 강의저장.txt", ios::app);

	//저장한 시간을 기록한다
	out << endl << endl << endl;
	auto now = chrono::system_clock::now();	//epoch로 부터 증가한 tick
	auto time = chrono::system_clock::to_time_t(now);	//UTC 시간으로 변환
	auto lt = localtime(&time); //현지 시간으로 변환

	auto old = out.imbue(locale("ko_KR"));
	//날짜를 내 마음대로 출력한다
	out << "====================================================================================================" << endl;
	out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
	out << "====================================================================================================" << endl;
	out.imbue(old);

	//읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다
	//STL 자료구조와 알고리즘을 이용해 본다, 좋은 코딩은 아니다
	vector<char> v{ istreambuf_iterator<char>{in},{} };
	copy(v.begin(), v.end(), ostreambuf_iterator<char>{out});

	/*for (char c : v)
		out << c;*/

}




====================================================================================================
FileName.cpp, 저장시간: 2024-03-05 화요일 오전 12:53:49 
====================================================================================================
#include "save.h"


int main()
{


	save("FileName.cpp");
}






====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 3:43:09 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog
{
	char c{ (char)uidChar(dre) };
	int num{ uidNum(dre) };
public:
	Dog()
	{
		//cout << "디폴트 생성" << endl;
	}
	friend ostream& operator<<(ostream& os, const Dog& dog)
	{
		return os << "글자:" << dog.c << ", 숫자" << dog.num;
	}
};



int main()
{
	array<Dog, 100> dogs;		//초기화 안해도 디폴트 생성됨


	// 문제 dogs를 binary mode/write 로 파일에 기록하라
	// 기록된 파일을 읽어서 num값이 가장 큰 dog를 찾아 화면에 출력하라

	ofstream out{ "Dog.txt",ios::binary };
	out.write((const char*)dogs.data(), sizeof(Dog) * 100);

	for (Dog dog : dogs)
		cout << dog << endl;

	cout << endl << endl;


	array<Dog, 100> dogs_read;

	ifstream in{ "Dog.txt",ios::binary };
	if (not in)
	{
		cout << "파일열기 실패";
		exit(0);
	}

	in.read((char*)dogs_read.data(), sizeof(Dog) * 100);
	for (Dog dog : dogs_read)
		cout << dog << endl;


	//auto pos = max_element(dogs_read.begin(), dogs_read.end());
	//cout << "최댓값:" << *pos << endl;



	save("FileName.cpp");
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 3:49:11 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog
{
	char c{ (char)uidChar(dre) };
	int num{ uidNum(dre) };
public:
	Dog()
	{
		//cout << "디폴트 생성" << endl;
	}
	friend ostream& operator<<(ostream& os, const Dog& dog)
	{
		return os << "글자:" << dog.c << ", 숫자" << dog.num;
	}
};



int main()
{
	array<Dog, 100> dogs;		//초기화 안해도 디폴트 생성됨


	// 문제 dogs를 binary mode/write 로 파일에 기록하라
	// 기록된 파일을 읽어서 num값이 가장 큰 dog를 찾아 화면에 출력하라

	ofstream out{ "Dog.txt",ios::binary };
	out.write((const char*)dogs.data(), sizeof(Dog) * 100);

	for (Dog dog : dogs)
		cout << dog << endl;

	cout << endl << endl;


	array<Dog, 100> dogs_read;

	
	for (Dog dog : dogs_read)
		cout << dog << endl;


	//auto pos = max_element(dogs_read.begin(), dogs_read.end());
	//cout << "최댓값:" << *pos << endl;



	save("FileName.cpp");
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 4:06:22 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog
{
	char c{ (char)uidChar(dre) };
	int num{ uidNum(dre) };
public:
	Dog()
	{
		//cout << "디폴트 생성" << endl;
	}
	friend ostream& operator<<(ostream& os, const Dog& dog)
	{
		return os << "글자:" << dog.c << ", 숫자" << dog.num;
	}
};



int main()
{
	array<Dog, 100> dogs;		//초기화 안해도 디폴트 생성됨


	// 문제 dogs를 binary mode/write 로 파일에 기록하라
	// 기록된 파일을 읽어서 num값이 가장 큰 dog를 찾아 화면에 출력하라

	ofstream out{ "Dog.txt",ios::binary };
	out.write((const char*)dogs.data(), sizeof(Dog) * 100);

	for (Dog dog : dogs)
		cout << dog << endl;

	cout << endl << endl;


	array<Dog, 100> dogs_read;

	ifstream in{ "Dog.txt",ios::binary };
	if (not in)
	{
		cout << "파일열기 실패";
		exit(0);
	}

	in.read((char*)dogs_read.data(), sizeof(Dog) * 100);
	for (Dog dog : dogs_read)
		cout << dog << endl;


	//auto pos = max_element(dogs_read.begin(), dogs_read.end());
	//cout << "최댓값:" << *pos << endl;



	save("FileName.cpp");
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 6:36:10 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//-----------------------------------------------------------------
// 2024.03.018 1학기 stl 화 5~6 목 5~6                       (3주 1)
// 
//-----------------------------------------------------------------



//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };


// 문제 "Dog.txt" 파일은 binary 모드로 기록되었다
// 여기에는 몇 개인지 모르는 class Dog 객체를 write 함수를 사용하여 기록하였다
// class Dog의 멤버는 다음과 같다
// 파일을 읽어 num값이 가장 큰 Dog 객체를 화면에 출력하라

class Dog
{
	char c;
	int num;
public:
	int getN()const 
	{
		return num;
	}
	void show()const
	{
		cout << "char - " << c << ", num - " << num << endl;
	}
	friend istream& operator>>(istream& is, Dog& dog)
	{
		return is.read((char*)&dog, sizeof(Dog));
	}
	
};

int main()
{
	

	ifstream in{ "Dog.txt",ios::binary };
	if (not in)
	{
		cout << "파일 열기 실패" << endl;
		exit(0);
	}
	

	//마지막 Dog   char - i, num - 38857
	//가장 큰 Dog:char - y, num - 99646

	array<Dog, 100> dogs_read;
	in.read((char*)dogs_read.data(), sizeof(Dog) * 100);
	for (Dog d : dogs_read)
		d.show();
	
	
	auto pos=max_element(dogs_read.begin(), dogs_read.end(), [](const Dog& a, const Dog& b) {return a.getN() < b.getN(); });
	//begin=a end=b, b-a == 800  -> a의 type이 뭐야? -> a의 type으로 나눠서 개수를 알아낸다
	
	cout << "num 값이 가장 큰 Dog:";
	pos->show();





	save("FileName.cpp");
}




//Dog dog;
//int count{};
//while (in >> dog)
//count++;
//cout << "개수:" << count << endl;
//dog.show();


// dogs.data() == 시작주소


====================================================================================================
FileName.cpp, 저장시간: 2024-03-18 월요일 오후 6:52:25 
====================================================================================================
#include "save.h"
#include <random>
#include <format>
#include <print>
#include <array>
#include <numeric>


//-----------------------------------------------------------------
// 2024.03.018 1학기 stl 화 5~6 목 5~6                       (3주 1)
// 
//-----------------------------------------------------------------



//문제 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 wrtie 함수를 사용하여 기록되어 있다
// 파일은 binary 모드로 열어 기록하였다
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 
// 화면에 출력하라


default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };


// 문제 "Dog.txt" 파일은 binary 모드로 기록되었다
// 여기에는 몇 개인지 모르는 class Dog 객체를 write 함수를 사용하여 기록하였다
// class Dog의 멤버는 다음과 같다
// 파일을 읽어 num값이 1000미만인 Dog 객체를 화면에 출력하라

class Dog
{
	char c;
	int num;
public:
	int getN()const 
	{
		return num;
	}
	void show()const
	{
		cout << "char - " << c << ", num - " << num << endl;
	}
	friend istream& operator>>(istream& is, Dog& dog)
	{
		return is.read((char*)&dog, sizeof(Dog));
	}
	
};

int main()
{
	

	ifstream in{ "Dog.txt",ios::binary };
	if (not in)
	{
		cout << "파일 열기 실패" << endl;
		exit(0);
	}
	

	//마지막 Dog   char - i, num - 38857
	//가장 큰 Dog:char - y, num - 99646

	array<Dog, 100> dogs_read;
	in.read((char*)dogs_read.data(), sizeof(Dog) * 100);
	for (Dog d : dogs_read)
		d.show();
	
	
	auto pos=max_element(dogs_read.begin(), dogs_read.end(), [](const Dog& a, const Dog& b) {return a.getN() < b.getN(); });
	//begin=a end=b, b-a == 800  -> a의 type이 뭐야? -> a의 type으로 나눠서 개수를 알아낸다
	
	cout << "num 값이 가장 큰 Dog:";
	pos->show();

	auto p = count_if(dogs_read.begin(), dogs_read.end(), [](const Dog& dog) {return 1000 > dog.getN(); }); //숫자는 왼쪽에 쓰자
	cout << p;

	int cnt{};
	for (Dog d : dogs_read)
		if (d.getN() < 1000)
			cnt++;
		
	cout << "num 값이 1000 미만인 개수:" << cnt << endl;





	save("FileName.cpp");
}




//Dog dog;
//int count{};
//while (in >> dog)
//count++;
//cout << "개수:" << count << endl;
//dog.show();


// dogs.data() == 시작주소


====================================================================================================
FileName.cpp, 저장시간: 2024-03-19 화요일 오후 4:09:03 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
//-----------------------------------------------------------------
// 2024.03.19 1학기 stl 화 5~6 목 5~6                       (3주 2)
// 
// 실행 파일의 메모리 영역 - stack code data free store(heap)
//-----------------------------------------------------------------

void f()
{
	int num{123};

	cout << "나는 함수 f 입니다" << endl;
	cout << "f()의 변수 num " << addressof(num) << endl;
}



int gnum{};
string s{"전역 스트링"};






int main()
{
	string s{ "메모리 관찰" };
	cout << "지역 객체 string - " << addressof(s) << endl;

	array<int, 10> a;
	cout << "지역 객체 array<int,10> " << endl;
	for (int i = 0; i < a.size(); ++i)
		cout << "a[" << i << "]" << addressof(a[i]) << endl;

	f();


	cout << "전역 string - " << ::s << endl;
	cout << addressof(::s) << endl;
	cout << "전역 int - " << endl;
	cout << addressof(gnum) << endl;

	cout << endl << endl;
	cout << "함수가 기록되는 메모리 영역 - CODE segment, TEXT segment" << endl;
	cout << "main() - " << addressof(main) << endl;
	cout << "f() - " << addressof(f) << endl;
	cout << "save() - " << addressof(save) << endl;


	string* p = new string[2]{ "동적할당한 string1","동적할당한 string2" };
	cout << endl << endl;

	cout << p[0]<< " - " << addressof(p[0]) << endl;
	cout << p[1]<< " - " << addressof(p[1]) << endl;


	save("FileName.cpp");
}



// 실제로 실행해보면 메모리 위치가 다르다


====================================================================================================
FileName.cpp, 저장시간: 2024-03-19 화요일 오후 5:21:13 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
//-----------------------------------------------------------------
// 2024.03.19 1학기 stl 화 5~6 목 5~6                       (3주 2)
// 
// 실행 파일의 메모리 영역 - stack code data free store(heap)
//-----------------------------------------------------------------


// 문제 프로그램에서 이용할 수 있는 전역변수의 최대 크기는?

int num[100000000]{};	//초기화 하지 않은 data == default로 초기화한 data
//int num[100000000]{1};  //num[0]만 초기화 할 수 없다, 400mb이미지를 복사해야한다

int main(){
	num[99999999] = 1234567890;
	cout << num[99999999] << endl;
	cout << "키를 누르면 프로그램 끝 - ";
	char c;
	cin >> c;

	

	save("FileName.cpp");
}
	


// 실제로 실행해보면 메모리 위치가 다르다	


====================================================================================================
FileName.cpp, 저장시간: 2024-03-25 월요일 오후 6:27:20 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
//-----------------------------------------------------------------
// 2024.03.25 1학기 stl 화 5~6 목 5~6                       (4주 1)
// 
// 메모리 동적할당 - RAII
//-----------------------------------------------------------------


// 문제 사용자가 입력한 int num 만큼 메모리를 동적할당하라
// int를 num개 동적할당한다
// 이 메모리를 1부터 시작하는 정수로 채운다
// 이 메모리의 합계를 화면에 출력한다
// 이 모든 과정을 영원히 반복하라

// -> run-time에서야 num값이 결정된다 --> new T[num]
// -> complie time에 모든 값이 결정 --> constexpr

int main()
{
	save("FileName.cpp");

	int num;
	while (1)
	{

		cout << "숫자를 입력하라 - ";
		cin >> num;

		int* p = new int[num];
		iota(p, p + num, 1);
		long long sum = accumulate(p, p + num, 0LL);  // 0울 int로 계산하기 때문에 값이 다르게 나온다 LL을 붙여 long long 으로 바꿔줘야 한다


		cout << "합계 - " << sum << endl;


		delete[] p;		// new와 짝이 맞는 delete를 코딩
	}

	
}


====================================================================================================
FileName.cpp, 저장시간: 2024-03-25 월요일 오후 6:56:45 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
//-----------------------------------------------------------------
// 2024.03.25 1학기 stl 화 5~6 목 5~6                       (4주 1)
// 
// 메모리 동적할당 - RAII
// 
// 앞으로 c++ 에서 사용하지 않아야 할 것들
// char*  -> string 
// T[N]  -> array<T,N>
// T*    -> unique_ptr, shared_ptr( 스마트 포인터로 대체)
//-----------------------------------------------------------------


// 문제 사용자가 입력한 int num 만큼 메모리를 동적할당하라
// int를 num개 동적할당한다
// 이 메모리를 1부터 시작하는 정수로 채운다
// 이 메모리의 합계를 화면에 출력한다
// 이 모든 과정을 영원히 반복하라

// -> run-time에서야 num값이 결정된다 --> new T[num]
// -> complie time에 모든 값이 결정 --> constexpr

class Dog
{
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};
void f() 
{
	cout << "f 시작" << endl;
	Dog* p;
	{//예외 발생
		p = new Dog;
		throw 1234;		// catch 라인으로 이동
	}

	delete p;
	cout << "f 종료" << endl;
};

int main()
{
	save("FileName.cpp");
	cout << "메인 시작" << endl;

	try
	{
		f();// 자원을 확보하고 정리하는 함수
	}
	catch (...)
	{

	}

	cout << "메인 끝" << endl;
}




// 메모리 해제를 까먹음
// 메모리를 여러번 해제함 - dangling 프로그램이 바로 죽는다
// 지역을 벗어나면 반드시 소멸한다 - 연결시켜줘야한다



====================================================================================================
FileName.cpp, 저장시간: 2024-03-25 월요일 오후 7:04:58 
====================================================================================================
#include "save.h"
#include <string>
#include <array>
#include <numeric>
//-----------------------------------------------------------------
// 2024.03.25 1학기 stl 화 5~6 목 5~6                       (4주 1)
// 
// 메모리 동적할당 - RAII
// 
// 앞으로 c++ 에서 사용하지 않아야 할 것들
// char*  -> string 
// T[N]  -> array<T,N>
// T*    -> unique_ptr, shared_ptr( 스마트 포인터로 대체)
//-----------------------------------------------------------------


// 문제 사용자가 입력한 int num 만큼 메모리를 동적할당하라
// int를 num개 동적할당한다
// 이 메모리를 1부터 시작하는 정수로 채운다
// 이 메모리의 합계를 화면에 출력한다
// 이 모든 과정을 영원히 반복하라

// -> run-time에서야 num값이 결정된다 --> new T[num]
// -> complie time에 모든 값이 결정 --> constexpr

class Dog
{
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};


// RAII idiom(관용구) - 메모리, 파일, jthread

class Smart_ptr
{
	Dog* p;
public:
	Smart_ptr(Dog* p):p{p}{}
	~Smart_ptr()
	{
		delete p;
	}
};

void f() 
{
	cout << "f 시작" << endl;
	
	{//예외 발생
		Smart_ptr p{ new Dog };	// stack-unwinding   c++ 언어가 보장
		throw 1234;		// catch 라인으로 이동
	}


	cout << "f 종료" << endl;
};

int main()
{
	save("FileName.cpp");
	cout << "메인 시작" << endl;

	try
	{
		f();// 자원을 확보하고 정리하는 함수
	}
	catch (...)
	{

	}

	cout << "메인 끝" << endl;
}




// 메모리 해제를 까먹음
// 메모리를 여러번 해제함 - dangling 프로그램이 바로 죽는다
// 지역을 벗어나면 반드시 소멸한다 - 연결시켜줘야한다
// 예외 처리가되면 소멸이 안될 수 있다
